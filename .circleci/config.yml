version: '2.1'
orbs:
  gh: circleci/github-cli@2.1.1
  maven: circleci/maven@1.4.0
  node: circleci/node@5.0
  slack: circleci/slack@4.12.0

executors:
  mvn-11:
    docker:
      - image: 'cimg/openjdk:11.0'

commands:
  notify-slack:
    description: "Notify slack on channel << parameters.channel >>"
    parameters:
      channel:
        type: string
      mentions_failure:
        type: string
        default: ''
      mentions_success:
        type: string
        default: ''
    steps:
      - slack/notify:
          event: fail
          channel: << parameters.channel >>
          mentions: << parameters.mentions_failure >>
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: << parameters.channel >>
          mentions: << parameters.mentions_success >>
          template: basic_success_1
  push-artifacts:
    description: | 
      Places the artifacts in in the given repository, to trigger the target pipeline.
      If the branch is "dev", it will push straight away, if it's trino-snowflake-connector, it will raise a PR.
    parameters:
      target_repository:
        type: string
      target_branch:
        type: enum
        enum: ["dev", "trino-snowflake-connector"]
      target_path:
        type: string
      environment_type:
        type: enum
        enum: ["aws", "gcp"]
    steps:
      - gh/install
      - run:
          name: Clone << parameters.target_repository >> repository
          command: |
            branch_name=<< parameters.target_branch >>
            echo "export branch_name=$branch_name" >> $BASH_ENV
            git clone https://${GITHUB_TOKEN}@github.com/harbrdata/<< parameters.target_repository >>.git target_repo_<< parameters.environment_type >>
      - run:
          name: Copy generated files into new branch << parameters.target_branch >>
          command: |
            cd target_repo_<< parameters.environment_type >>/<< parameters.target_path >>
            # Create the branch if it doesn't exist in origin
            git switch $branch_name || git switch -c $branch_name
            rm trino-snowflake-*.zip
            cp /tmp/generated-artifacts/trino-snowflake-*.zip .
            git add --all
      - run:
          name: Push changes to << parameters.target_branch >>
          command: |
            cd target_repo_<< parameters.environment_type >>/<< parameters.target_path >>
            if [ -n "$(git status --porcelain)" ]; then
              echo "Changes to be committed:"
              git status
              git config user.email "harbr-installer@harbrdata.com"
              git config user.name "CircleCI Job [${CIRCLE_PROJECT_REPONAME}]"
              git commit -m "Automated commit from ${CIRCLE_PROJECT_REPONAME} ${CIRCLE_SHA1} to update trino-snowflake.zip files"
              git push --set-upstream origin HEAD

              if [ "$branch_name" == "trino-snowflake-connector" ]; then
                # Handle PR
                if pr_number=$(gh pr view "$branch_name" --json number -q '.number') ; then
                  echo "Existing PR ${pr_number}"
                  comment="PR updated by [CircleCI](${CIRCLE_BUILD_URL}) from ${CIRCLE_PROJECT_REPONAME} ([${CIRCLE_SHA1}](https://github.com/harbrdata/${CIRCLE_PROJECT_REPONAME}/commit/${CIRCLE_SHA1})). This commit was triggered by @${CIRCLE_USERNAME}"
                  gh pr comment $pr_number --body "$comment" --repo "harbrdata/<< parameters.target_repository >>"
                  gh pr edit $pr_number --repo "harbrdata/<< parameters.target_repository >>" --add-assignee "${CIRCLE_USERNAME}"
                else
                  echo "There is no existing PR for branch $branch_name"
                  title="${CIRCLE_PROJECT_REPONAME}: ${gcp_remote_installer_version}"
                  body="PR raised from ${CIRCLE_PROJECT_REPONAME} ([${CIRCLE_SHA1}](https://github.com/harbrdata/${CIRCLE_PROJECT_REPONAME}/commit/${CIRCLE_SHA1})) with trino-snowflake-connector changes. This PR was triggered by @${CIRCLE_USERNAME}. See [changelog](https://github.com/harbrdata/${CIRCLE_PROJECT_REPONAME}/blob/${CIRCLE_BRANCH}/CHANGELOG.md) for more info"
                  gh pr create --title "$title" --draft --body "$body" --head "$branch_name" --repo "harbrdata/<< parameters.target_repository >>" --assignee "@me,${CIRCLE_USERNAME}"
                fi
                echo "Please review the PR available here and mark it as ready for review when done"
                gh pr view "$branch_name"
              else
                echo "Not raising a PR for branch $branch_name. Check the ${CIRCLE_PROJECT_REPONAME} $branch_name pipeline."
              fi
            else
              echo "No changes to be committed"
            fi
      - notify-slack:
          channel: 'build-remote-services-<< parameters.environment_type >>'
          mentions_failure: '@here'

jobs:
  semantic-release:
    executor: node/default
    steps:
      - checkout
      - run: npm install @semantic-release/exec @semantic-release/git @semantic-release/changelog semantic-release-slack-bot -D
      - run: npx semantic-release
  build:
    executor: mvn-11
    steps:
      - checkout
      - maven/with_cache:
          steps:
            - run:
                command: "mvn -B package --file pom.xml"
      - run:
          command: |
            mkdir -p /tmp/generated-artifacts
            cp target/trino-snowflake-*.zip /tmp/generated-artifacts
      - store_test_results:
          path: target
      - store_artifacts:
          path: /tmp/generated-artifacts/
      - when:
        condition:
          equal: [ dev, << pipeline.git.branch >> ]
          steps:
            - push-artifacts:
                target_repository: gcp-remote-installer
                target_branch: dev
                target_path: services/spaces/runtime_artifacts
                environment_type: gcp
      - when:
        condition:
          equal: [ main, << pipeline.git.branch >> ]
          steps:
            - push-artifacts:
                target_repository: gcp-remote-installer
                target_branch: trino-snowflake-connector
                target_path: services/spaces/runtime_artifacts
                environment_type: gcp

workflows:
  release:
    jobs:
      - semantic-release:
          filters:
            branches:
              only:
                - main
          context:
            - github-developers-robot
            # to choose the right slack webhook context please see https://harbrgroup.atlassian.net/wiki/spaces/DEV/pages/2243657729/Semantic+Release+setup
            #  slack-webhook-platform-changelogs-internal for #platform-changelogs-internal channel
            #  slack-webhook-platform-changelogs for #platform-changelogs channel
            - slack-webhook-platform-changelogs-services
  build_and_archive:
    jobs:
      - build:
          context:
            - github-developers-robot
            - slack
