version: '2.1'
orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-s3: circleci/aws-s3@3.1.1
  maven: circleci/maven@1.4.0
  node: circleci/node@5.0
  slack: circleci/slack@4.12.0

executors:
  mvn-11:
    docker:
      - image: 'cimg/openjdk:11.0'

commands:
  notify-slack:
    description: "Notify slack on channel << parameters.channel >>"
    parameters:
      channel:
        type: string
      mentions_failure:
        type: string
        default: ''
      mentions_success:
        type: string
        default: ''
    steps:
      - slack/notify:
          event: fail
          channel: << parameters.channel >>
          mentions: << parameters.mentions_failure >>
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: << parameters.channel >>
          mentions: << parameters.mentions_success >>
          template: basic_success_1
  push-artifacts:
    description: | 
      Places the artifacts in in the given repository, to trigger the target pipeline.
      If the branch is "dev", it will push straight away.
    parameters:
      target_repository:
        type: string
      target_branch:
        type: enum
        enum: ["dev"]
      target_path:
        type: string
      environment_type:
        type: enum
        enum: ["aws", "gcp"]
    steps:
      - run:
          name: Clone << parameters.target_repository >> repository
          command: |
            branch_name=<< parameters.target_branch >>
            echo "export branch_name=$branch_name" >> $BASH_ENV
            git clone https://${GITHUB_TOKEN}@github.com/harbrdata/<< parameters.target_repository >>.git target_repo_<< parameters.environment_type >>
      - run:
          name: Copy generated files into new branch << parameters.target_branch >> (<< parameters.target_repository >>)
          command: |
            cd target_repo_<< parameters.environment_type >>/<< parameters.target_path >>
            # Create the branch if it doesn't exist in origin
            git switch $branch_name || git switch -c $branch_name
            rm trino-snowflake-*.zip
            cp /tmp/generated-artifacts/trino-snowflake-*.zip .
            git add --all
      - run:
          name: Push changes to << parameters.target_branch >> (<< parameters.target_repository >>)
          command: |
            cd target_repo_<< parameters.environment_type >>/<< parameters.target_path >>
            if [ -n "$(git status --porcelain)" ]; then
              echo "Changes to be committed:"
              git status
              git config user.email "harbr-installer@harbrdata.com"
              git config user.name "CircleCI Job [${CIRCLE_PROJECT_REPONAME}]"
              git commit -m "Automated commit from ${CIRCLE_PROJECT_REPONAME} ${CIRCLE_SHA1} to update trino-snowflake.zip files"
              git push --set-upstream origin HEAD
            else
              echo "No changes to be committed"
            fi
      - notify-slack:
          channel: 'build-remote-services-<< parameters.environment_type >>'
          mentions_failure: '@here'
  upload-to-s3:
    description: Uploads the trino-snowflake-367-*.zip file to the S3 bucket
    steps:
      - aws-cli/setup:
          aws-access-key-id: ACCESS_ID
          aws-region: AWS_REGION
          aws-secret-access-key: SECRET_KEY
      - run:
          name: Check if trino-snowflake-connector version exists
          command: |
            export versioned_artifact="trino-snowflake-367-$(cat VERSION).zip"
            echo 'export versioned_artifact="${versioned_artifact}"' >> $BASH_ENV
            cp /tmp/generated-artifacts/trino-snowflake-367.zip /tmp/generated-artifacts/${versioned_artifact}
            # CircleCI runs with '-eo pipefail by default'. This doesn't let us evaluate error messages.
            set +eo pipefail
            if aws s3api head-object --bucket harbr-deploy-artifacts --key "trino-snowflake-connector/${CIRCLE_BRANCH}/${versioned_artifact}" 2>&1 | grep -q 'Not Found'; then
              echo "Versioned artifact $versioned_artifact doesn't exist, it should be good to go with a new version"
            else
              echo "Object s3://harbr-deploy-artifacts/trino-snowflake-connector/${CIRCLE_BRANCH}/${versioned_artifact} already exists"
              echo "Consider updating VERSION file"
              exit 1
            fi
      - aws-s3/copy:
          aws-access-key-id: ACCESS_ID
          aws-secret-access-key: SECRET_KEY
          aws-region: AWS_REGION
          from: /tmp/generated-artifacts/trino-snowflake-367.zip
          to: s3://harbr-deploy-artifacts/trino-snowflake-connector/latest/trino-snowflake-367.zip
      - aws-s3/copy:
          aws-access-key-id: ACCESS_ID
          aws-secret-access-key: SECRET_KEY
          aws-region: AWS_REGION
          from: /tmp/generated-artifacts/trino-snowflake-367-*.zip
          to: s3://harbr-deploy-artifacts/trino-snowflake-connector/${CIRCLE_BRANCH}/
      - aws-s3/copy:
          aws-access-key-id: ACCESS_ID
          aws-secret-access-key: SECRET_KEY
          aws-region: AWS_REGION
          from: /tmp/generated-artifacts/trino-snowflake-367.zip
          to: s3://harbr-deploy-artifacts/trino-snowflake-connector/${CIRCLE_BRANCH}/trino-snowflake-367.zip

jobs:
  semantic-release:
    executor: node/default
    steps:
      - checkout
      - run: npm install @semantic-release/exec @semantic-release/git @semantic-release/changelog semantic-release-slack-bot -D
      - run: npx semantic-release
  build:
    executor: mvn-11
    steps:
      - checkout
      - maven/with_cache:
          steps:
            - run:
                name: "Maven package"
                command: "mvn -B package --file pom.xml"
      - run:
          name: Copy files to /tmp/generated-artifacts
          command: |
            mkdir -p /tmp/generated-artifacts
            cp target/trino-snowflake-*.zip /tmp/generated-artifacts
      - store_test_results:
          path: target
      - store_artifacts:
          path: /tmp/generated-artifacts/
      - when:
          condition:
            equal: [ "dev", << pipeline.git.branch >> ]
          steps:
            - push-artifacts:
                target_repository: gcp-remote-installer
                target_branch: dev
                target_path: services/spaces/runtime_artifacts
                environment_type: gcp
            - push-artifacts:
                target_repository: spaces_core
                target_branch: dev
                target_path: artifacts_buckets/aws/dev/remote/env/bootstrap/applications
                environment_type: aws
      - when:
          condition:
            equal: [ "main", << pipeline.git.branch >> ]
          steps:
            - upload-to-s3

workflows:
  release:
    jobs:
      - semantic-release:
          filters:
            branches:
              only:
                - main
          context:
            - github-developers-robot
            # to choose the right slack webhook context please see https://harbrgroup.atlassian.net/wiki/spaces/DEV/pages/2243657729/Semantic+Release+setup
            #  slack-webhook-platform-changelogs-internal for #platform-changelogs-internal channel
            #  slack-webhook-platform-changelogs for #platform-changelogs channel
            - slack-webhook-platform-changelogs-services
  build_and_archive:
    jobs:
      - build:
          context:
            - aws-credentials-global
            - github-developers-robot
            - slack
